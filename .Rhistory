df <- dbGetQuery(conn = mydb, sql)
analysis_md_date_date_id <- df$date_id_end
analysis_md_date_end_date_id <- df$date_id_end
analysis_md_date_start_date_id <- df$date_id_start
for (i in df_segment_product$id)
{
#####################################################################
#Query agent/customer transaction data
sql <- paste("
select
rp.level12_id agent_id,
d.start_date created_date,
rp.amount
from
RP_ESEWA_020.rp_esewa_agent_base_dummy_rfm rp
join
ESEWA_MASTER.md_date d
on
(rp.level1_id = d.id)
join
ESEWA_MASTER.md_product p
on
(rp.level7_id = p.id)
where
d.start_date >= str_to_date('",analysis_start_date,"','%Y-%m-%d')
and d.end_date <= str_to_date('",analysis_end_date,"','%Y-%m-%d')
and d.date_level = 'D'
and rp.level7_id = ",i,"
")
#Executing Query and getting records
df_transaction_details <- dbGetQuery(conn = mydb, sql)
# Ensuring date formatting
df_transaction_details[,2] <- as.Date(as.character(df_transaction_details[,2]),'%Y-%m-%d')
### Calculate RFM
rfm_result <- rfm_table_order(data = df_transaction_details,
customer_id = agent_id,
order_date = created_date,
revenue = amount,
analysis_date = analysis_end_date)
rfm_result.df <- rfm_result$rfm
# Intermediate transformation in the dataframe
rfm_result.df$run_date_id_max <- analysis_md_date_date_id
rfm_result.df$start_date_id <- analysis_md_date_start_date_id
rfm_result.df$end_date_id <- analysis_md_date_end_date_id
rfm_result.df$start_date <- analysis_start_date
rfm_result.df$end_date <- analysis_end_date
rfm_result.df$fm_total <- rfm_result.df$frequency_score + rfm_result.df$monetary_score
rfm_result.df$fm_score <- cut(rfm_result.df$fm_total, breaks = 5, labels = c(1,2,3,4,5))
rfm_result.df$product_id <- i
#summary(rfm_result.df)
#Updating the computed results back to mysql database
#try(
#  silent = FALSE, {
dbWriteTable(conn = mydb,
name="rp_esewa_agent_product_segment",
value=rfm_result.df,
#Target table datatype if the table doesn't exists
field.types=list(
customer_id = "int",
date_most_recent = "date",
recency_days = "double",
transaction_count = "double",
amount = "double",
recency_score = "int",
frequency_score = "int",
monetary_score = "int",
rfm_score = "int",
rfm_segment = "int",
fm_total = "int",
fm_score = "int",
run_date_id_max = "int",
start_date_id = "int",
end_date_id = "int",
start_date = "date",
end_date = "date",
product_id = "double"
),
#Identity row number will be avoided
row.names = FALSE,
overwrite = TRUE,
append = FALSE
)
#    #Closing the Connection
#    dbDisconnect(conn = mydb)})
#Updating customer profile
sql <- paste("update RP_ESEWA_020.rp_esewa_agent_product_segment s, ESEWA_MASTER.md_rfm_segment_map m
set s.rfm_segment = m.segment_id
where
(s.frequency_score = m.recency_score and s.fm_score = m.fm_score  and s.product_id = ",i,")")
df <- dbGetQuery(conn = mydb, sql)
#####################################################################
### For End Here
#####################################################################
}
dbDisconnect(conn = mydb)
dataset = read.csv("C:/Users/Manank/Desktop/TestDataset1. csv")
dataset = read.csv("https://raw.githubusercontent.com/guru99-edu/R-Programming/master/titanic_data.csv")
df=dataset
kmeans(df, 2)
df
kmeans(df, 2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(GGally)
install.packages(GGally)
install.packages("GGally")
library(ggplot2)
library(dplyr)
library(GGally)
library(rpart)
library(rpart.plot)
library(randomForest)
test <- read.csv('../input/test.csv',stringsAsFactors = FALSE)
test <- read.csv('test.csv',stringsAsFactors = FALSE)
train <- read.csv('train.csv', stringsAsFactors = FALSE)
# Creating a new data set with both the test and the train sets
full <- bind_rows(train,test)
LT=dim(train)[1]
# Checking the structure
str(full)
# Missing values
colSums(is.na(full))
colSums(full=="")
# We have a lot of missing data in the Age feature (263/1309)
# Let's change the empty strings in Embarked to the first choice "C"
full$Embarked[full$Embarked==""]="C"
# We have a lot of missing data in the Age feature
# Let's change the empty strings in Embarked to the first choice "C"
full$Embarked[full$Embarked==""]="C"
# Let's see how many features we can move to factors
apply(full,2, function(x) length(unique(x)))
# Let's move the features Survived, Pclass, Sex, Embarked to be factors
cols<-c("Survived","Pclass","Sex","Embarked")
for (i in cols){
full[,i] <- as.factor(full[,i])
}
# Now lets look on the structure of the full data set
str(full)
# First, let's look at the relationship between sex and survival:
ggplot(data=full[1:LT,],aes(x=Sex,fill=Survived))+geom_bar()
# Survival as a function of Embarked:
ggplot(data = full[1:LT,],aes(x=Embarked,fill=Survived))+geom_bar(position="fill")+ylab("Frequency")
t<-table(full[1:LT,]$Embarked,full[1:LT,]$Survived)
for (i in 1:dim(t)[1]){
t[i,]<-t[i,]/sum(t[i,])*100
}
t
# Survival as a function of Pclass:
ggplot(data = full[1:LT,],aes(x=Pclass,fill=Survived))+geom_bar(position="fill")+ylab("Frequency")
# It looks like you have a better chance to survive if you in lower ticket class.
# Now, let's devide the graph of Embarked by Pclass:
ggplot(data = full[1:LT,],aes(x=Embarked,fill=Survived))+geom_bar(position="fill")+facet_wrap(~Pclass)
full$FamilySize <- full$SibSp + full$Parch +1;
full1<-full[1:LT,]
ggplot(data = full1[!is.na(full[1:LT,]$FamilySize),],aes(x=FamilySize,fill=Survived))+geom_histogram(binwidth =1,position="fill")+ylab("Frequency")
ggplot(data = full1[!(is.na(full[1:LT,]$Age)),],aes(x=Age,fill=Survived))+geom_histogram(binwidth =3)
ggplot(data = full1[!is.na(full[1:LT,]$Age),],aes(x=Age,fill=Survived))+geom_histogram(binwidth = 3,position="fill")+ylab("Frequency")
# Is there a correlation between Fare and Survivial?
ggplot(data = full[1:LT,],aes(x=Fare,fill=Survived))+geom_histogram(binwidth =20, position="fill")
# It seems like if your fare is bigger, than you have a better chance to survive.
sum(is.na(full$Age))
# There are a lot of missing values in the Age feature, so I'll put the mean instead of the missing values.
full$Age[is.na(full$Age)] <- mean(full$Age,na.rm=T)
sum(is.na(full$Age))
# The title of the passanger can affect his survive:
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
full$Title[full$Title == 'Mlle']<- 'Miss'
full$Title[full$Title == 'Ms']<- 'Miss'
full$Title[full$Title == 'Mme']<- 'Mrs'
full$Title[full$Title == 'Lady']<- 'Miss'
full$Title[full$Title == 'Dona']<- 'Miss'
officer<- c('Capt','Col','Don','Dr','Jonkheer','Major','Rev','Sir','the Countess')
full$Title[full$Title %in% officer]<-'Officer'
full$Title<- as.factor(full$Title)
ggplot(data = full[1:LT,],aes(x=Title,fill=Survived))+geom_bar(position="fill")+ylab("Frequency")
# The train set with the important features
train_im<- full[1:LT,c("Survived","Pclass","Sex","Age","Fare","SibSp","Parch","Title")]
ind<-sample(1:dim(train_im)[1],500) # Sample of 500 out of 891
train1<-train_im[ind,] # The train set of the model
train2<-train_im[-ind,] # The test set of the model
# Let's try to run a logistic regression
model <- glm(Survived ~.,family=binomial(link='logit'),data=train1)
summary(model)
# We can see that SibSp, Parch and Fare are not statisticaly significant.
# Let's look at the prediction of this model on the test set (train2):
pred.train <- predict(model,train2)
pred.train <- ifelse(pred.train > 0.5,1,0)
# Mean of the true prediction
mean(pred.train==train2$Survived)
t1<-table(pred.train,train2$Survived)
# Presicion and recall of the model
presicion<- t1[1,1]/(sum(t1[1,]))
recall<- t1[1,1]/(sum(t1[,1]))
presicion
recall
# F1 score
F1<- 2*presicion*recall/(presicion+recall)
F1
test_im<-full[LT+1:1309,c("Pclass","Sex","Age","SibSp","Parch","Fare","Title")]
pred.test <- predict(model,test_im)[1:418]
pred.test <- ifelse(pred.test > 0.5,1,0)
res<- data.frame(test$PassengerId,pred.test)
names(res)<-c("PassengerId","Survived")
write.csv(res,file="res.csv",row.names = F)
setwd('/u01/tbc/')
df_data <- fread('data.csv')
setwd('/u01/tbc')
df_data <- fread('data.csv')
library(rfm)
library(data.table)
library(dplyr)
library(ggplot2)
#library(stringr)
#library(DT)
library(tidyr)
library(knitr)
library(rmarkdown)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd('/u01/tbc')
df_data <- fread('data.csv')
summary(df_data)
#Basic overview of loaded data
summary(df_data)
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
#See Summary of data after data cleaning
summary(df_data)
#See Summary of data after data cleaning
summary(df_data)
df_data <- fread('data.csv')
summary(df_data)
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
#See Summary of data after data cleaning
summary(df_data)
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
summary(df_data)
### Calculate RFM
analysis_date <- lubridate::as_date('2010-12-01', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
data
df_data
CustomerID
df_data
analysis_date
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
analysis_date
summary(df_data)
df_data[,2] <- as.Date(as.character(df_data[,2]),'%Y-%m-%d')
summary(df_data)
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
head(df_data)
df_data[,2] <- as.Date(as.character(df_data[,2]),'%Y/%m.%d')
summary(df_data)
head(df_data)
df_data[,5] <- as.Date(as.character(df_data[,5]),'%Y/%m.%d')
summary(df_data)
head(df_data)
df
as.character(df_data[,5]),'%Y/%m.%d'
as.character(df_data[,5])
df_data <- fread('data.csv')
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
#See Summary of data after data cleaning
summary(df_data)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%m/%d/%Y %H:%M'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
df_data[,5] <- as.Date(as.character(df_data[,5]),'%Y/%m.%d')
summary(df_data)
df_data <- fread('data.csv')
summary(df_data)
#Basic overview of loaded data
summary(df_data)
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
#See Summary of data after data cleaning
summary(df_data)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%m/%d/%Y'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
df_data[,5] <- as.Date(as.character(df_data[,5]),'%Y/%m.%d')
df_data <- fread('data.csv')
summary(df_data)
#Basic overview of loaded data
summary(df_data)
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
#See Summary of data after data cleaning
summary(df_data)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%m/%d/%Y'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
summary(df_data)
head(df_data)
tail(df_data)
max(df_data$InvoiceDate)
min(df_data$InvoiceDate)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%m-%d-%Y'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
summary(df_data)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%Y-%m-%d'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
summary(df_data)
csv')
df_data <- fread('data.csv')
df_data <- fread('data.csv')
summary(df_data)
#Basic overview of loaded data
summary(df_data)
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
#See Summary of data after data cleaning
summary(df_data)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%Y-%m-%d'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
summary(df_data)
df_data <- fread('data.csv')
summary(df_data)
#Basic overview of loaded data
summary(df_data)
#########################
###Data Cleaning
#########################
df_data <- df_data %>%
mutate(Quantity = replace(Quantity, Quantity<=0, NA),
UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))
df_data <- df_data %>%
drop_na()
head(df_data)
#############
## Recode columns
############
df_data <- df_data %>%
mutate(InvoiceNo=as.factor(InvoiceNo), StockCode=as.factor(StockCode),
InvoiceDate=as.Date(InvoiceDate, '%m/%d/%y'), CustomerID=as.factor(CustomerID),
Country=as.factor(Country))
df_data <- df_data %>%
mutate(total_dolar = Quantity*UnitPrice)
summary(df_data)
tail(df_data)
min(df_data$InvoiceDate)
max(df_data$InvoiceDate)
analysis_date <- lubridate::as_date('2011-12-30', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
summary(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2010-12-30', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
source('/u01/tbc/Customer-Segmentation-RFM.R', echo=TRUE)
### Calculate RFM
analysis_date <- lubridate::as_date('2010-12-30', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('12/01/2010', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
tail(df_data)
min(df_data$InvoiceDate)
max(df_data$InvoiceDate)
### Calculate RFM
analysis_date <- lubridate::as_date('2010-12-01', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
rfm_result
print(class(rfm_result))
summary(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2011-12-09', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
rfm_result
min(df_data$InvoiceDate)
max(df_data$InvoiceDate)
### Calculate RFM
analysis_date <- lubridate::as_date('2011-12-08', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
summary(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2010-12-08', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
summary(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2010-12-01', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
summary(rfm_result)
print(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2011-12-01', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
summary(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2011-12-08', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
summary(rfm_result)
### Calculate RFM
analysis_date <- lubridate::as_date('2011-12-09', tz = 'UTC')
rfm_result <- rfm_table_order(data = df_data, customer_id = CustomerID, order_date = InvoiceDate, revenue = total_dolar, analysis_date = analysis_date)
print(class(rfm_result))
rfm_result_df <- as_data_frame(rfm_result)
summary(rfm_result)
print(rfm_result)
#### Data Visualization - More to cover when we read about EDA(Explotry Data Analysis)
rfm_heatmap(rfm_result)
rfm_bar_chart(rfm_result)
rfm_histograms(rfm_result)
summary(rfm_result)
print(rfm_result)
#### Data Visualization - More to cover when we read about EDA(Explotry Data Analysis)
rfm_heatmap(rfm_result)
rfm_bar_chart(rfm_result)
rfm_histograms(rfm_result)
rfm_order_dist(rfm_result)
rfm_order_dist(rfm_result)
rfm_rm_plot(rfm_result)
rfm_fm_plot(rfm_result)
print(rfm_result)
